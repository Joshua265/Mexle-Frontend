import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
// import HtmlToReactParser from "html-to-react";

import { makeStyles } from "@material-ui/core/styles";
import {
  Backdrop,
  Paper,
  Typography,
  Button,
  IconButton,
  Divider,
} from "@material-ui/core";
import MenuIcon from "@material-ui/icons/Menu";
import FinishPage from "components/FinishPage";

import StepsProgress from "components/StepsProgress";
import AddButton from "container/AddButton";
import webServiceProvider from "helpers/webServiceProvider";
import { useRootStore } from "context/RootStateContext";
import CreateStep from "components/CreateStep";
import MultipleChoice from "components/MultipleChoice";
import { useTranslation } from "react-i18next";
import DOMPurify from "dompurify";

import checkForEditShow from "helpers/checkForEditShow";
import {
  htmlToReactParser,
  isValidNode,
  processingInstructions,
} from "helpers/transform";

const drawerWidth = 240;

const useStyles = makeStyles((theme) => ({
  coursePage: {
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    margin: 0,
  },
  content: {
    margin: "0px 0px 0px 20px",
    padding: 20,
    overflowX: "hidden",
    width: `calc(100% - 40)`,

    transition: theme.transitions.create(["margin", "width"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    // height: "calc(100vh - 112px)",
  },
  contentShift: {
    marginTop: 0,
    marginRight: 0,
    padding: 20,
    overflowX: "hidden",
    width: `calc(100% - ${drawerWidth}px - 40)`,
    marginLeft: drawerWidth + 20,
    transition: theme.transitions.create(["margin", "width"], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
    // height: "calc(100vh - 112px)",
  },
  titlePaper: {
    position: "sticky",
    top: -200,
    paddingTop: 20,
    margin: -20,
    marginBottom: 0,
  },
}));

const StepTitle = () => {
  return (
    <Paper className={classes.titlePaper} elevation={1}>
      <Typography variant="h6" component="h1">
        <IconButton
          edge="start"
          // className={classes.menuButton}
          color="inherit"
          aria-label="menu"
          onClick={() => setOpenStepProgress(!openStepProgress)}
        >
          <MenuIcon />
        </IconButton>
        {chapter ? chapter.title : ""} | {steps[currentStep].title}
      </Typography>
      {
        //only show editButton and edit to certain users
        checkForEditShow(userStore.userData, steps[currentStep].author) ? (
          <React.Fragment>
            <Button onClick={() => setOpen(true)}>{t("edit")}</Button>
            <CreateStep
              edit={true}
              open={open}
              handleClose={() => setOpen(false)}
              id={steps[currentStep]._id}
            />
          </React.Fragment>
        ) : (
          <React.Fragment />
        )
      }
    </Paper>
  );
};

export default StepTitle;
